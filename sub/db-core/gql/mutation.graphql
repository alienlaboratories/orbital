#
# Copyright 2017 Alien Labs.
#

#
# http://graphql.org/learn/schema
# https://facebook.github.io/graphql
#

#
# Custom scalars.
# http://graphql.org/learn/schema/#scalar-types
# http://dev.apollodata.com/tools/graphql-tools/scalars.html
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html
# https://github.com/mugli/learning-graphql/blob/master/7.%20Deep%20Dive%20into%20GraphQL%20Type%20System.md
# http://graphql.org/graphql-js/type
#

scalar Version

scalar Date

type DateTime {
  date:       String    # 2017-06-11
  datetime:   String    # 2017-06-11T10:30:00-04:00 UTC
  timezone:   String
}

#
# Unix timestamp.
# http://momentjs.com/docs/#/parsing/unix-timestamp-milliseconds
#

scalar Timestamp

#
# Opaque objects.
# NOTE: Input types cannot be used as regular types.
# E.g., FilterInput is used to define queries, but Project.board.filter is an opaque string.
#

scalar JSON

#===================================================================================================
# TODO(burdon): Use
# TODO(burdon): Move Item def here?
#===================================================================================================

input KeyInput {
  namespace:  String        # External namespace (query provider).
  bucket:     String        # ID of User or Group (null for system item).
  type:       String!
  id:         ID!
}

#===================================================================================================
# Directives
# TODO(burdon): Directives (for subscriptions, links, etc.)
# https://dev-blog.apollodata.com/new-features-in-graphql-batch-defer-stream-live-and-subscribe-7585d0c28b07
#===================================================================================================

#===================================================================================================
# Core.
# http://docs.oracle.com/javadb/10.8.3.0/ref (WHERE boolean expression)
# https://github.com/ghislainfourny/jsoniq-tutorial
# http://www.jinqjs.com/Examples
# https://jinqjs.readme.io/docs/where-filter
#===================================================================================================

# TODO(burdon): Why can't inputs be used for outputs?
# > https://github.com/graphql/graphql-js/issues/599 [me: 11/15/16]
# > https://github.com/graphql/graphql-js/issues/423 [me: 11/15/16]
# > https://github.com/apollostack/graphql-tools/issues/179

type Value {
  null:       Boolean

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  id:         ID
  date:       Date
  timestamp:  Timestamp

  values:     [Value]
}

input ValueInput {
  null:       Boolean

  key:        KeyInput

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  id:         ID
  date:       Date
  timestamp:  Timestamp

  values:     [ValueInput]

  map:        [MapMutationInput]
  set:        [SetMutationInput]
  array:      [ArrayMutationInput]
  object:     [ObjectMutationInput]

  # TODO(burdon): Define custom type/scalar?
  json:       String                # Serialized object.
}

#
# Array mutations.
# NOTE: GraphQL doesn't support maps (i.e., arbitrary keyed objects).
# Instead we declare arrays of typed objects and use Map mutations to update them.
# The underlying stored data representation can be anything (e.g., can be a JSON object), but it has to be
# queried and updated as an array.
#
# NOTE: Mutations COULD treat values as objects, but this would be wierd since they would still need
# to be queried as arrays.
#

# Multi-purpose Key x Value pair.
input KeyValue {
  key:        String!
  value:      ValueInput!
}

# Map (stored as array).
input MapMutationInput {
  predicate:  KeyValue              # Matcher for array object value.
  value:      ValueInput!           # Null to remove.
}

# Ordered set.
input SetMutationInput {
  add:        Boolean               # Default is true.
  value:      ValueInput!
}

# Plain array.
input ArrayMutationInput {
  index:      Int                   # Insert ordinal position (-1 to append; undefined to remove).
  value:      ValueInput!           # Value to input.
}

#
# Object mutation.
# TODO(burdon): Rename FieldMutationInput
# E.g., { field: 'title', value: { string: 'Alien' } }
#

input ObjectMutationInput {
  field:      String!
  value:      ValueInput
}

input ItemMutationInput {

  # Item to mutate.
  # TODO(burdon): Set key and bucket here (not in mutation).
  key:        KeyInput!

  # Array of generic mutations.
  mutations:  [ObjectMutationInput]!
}
